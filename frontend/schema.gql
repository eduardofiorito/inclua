"""Direct the client to resolve this field locally, either from the cache or local resolvers."""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!
  """An array of query argument names to include in the generated custom store key."""
  filter: [String!]
) on FIELD

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type AccessibleTo {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String!
  icon: UploadFile
  locale: String
  published_at: DateTime
  guides(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [AccessibleTo!]!
}

type AccessibleToConnection {
  values: [AccessibleTo]
  groupBy: AccessibleToGroupBy
  aggregate: AccessibleToAggregator
}

type AccessibleToAggregator {
  count: Int
  totalCount: Int
}

type AccessibleToGroupBy {
  id: [AccessibleToConnectionId]
  created_at: [AccessibleToConnectionCreated_at]
  updated_at: [AccessibleToConnectionUpdated_at]
  name: [AccessibleToConnectionName]
  description: [AccessibleToConnectionDescription]
  icon: [AccessibleToConnectionIcon]
  locale: [AccessibleToConnectionLocale]
  published_at: [AccessibleToConnectionPublished_at]
}

type AccessibleToConnectionId {
  key: ID
  connection: AccessibleToConnection
}

type AccessibleToConnectionCreated_at {
  key: DateTime
  connection: AccessibleToConnection
}

type AccessibleToConnectionUpdated_at {
  key: DateTime
  connection: AccessibleToConnection
}

type AccessibleToConnectionName {
  key: String
  connection: AccessibleToConnection
}

type AccessibleToConnectionDescription {
  key: String
  connection: AccessibleToConnection
}

type AccessibleToConnectionIcon {
  key: ID
  connection: AccessibleToConnection
}

type AccessibleToConnectionLocale {
  key: String
  connection: AccessibleToConnection
}

type AccessibleToConnectionPublished_at {
  key: DateTime
  connection: AccessibleToConnection
}

input AccessibleToInput {
  name: String!
  description: String!
  icon: ID
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAccessibleToInput {
  name: String
  description: String
  icon: ID
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAccessibleToInput {
  data: AccessibleToInput
}

type createAccessibleToPayload {
  accessibleTo: AccessibleTo
}

input updateAccessibleToInput {
  where: InputID
  data: editAccessibleToInput
}

type updateAccessibleToPayload {
  accessibleTo: AccessibleTo
}

input deleteAccessibleToInput {
  where: InputID
}

type deleteAccessibleToPayload {
  accessibleTo: AccessibleTo
}

type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  role: String!
  email: String!
  password: String!
  slug: String!
  avatar: UploadFile
  locale: String
  published_at: DateTime
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Author!]!
}

type AuthorConnection {
  values: [Author]
  groupBy: AuthorGroupBy
  aggregate: AuthorAggregator
}

type AuthorAggregator {
  count: Int
  totalCount: Int
}

type AuthorGroupBy {
  id: [AuthorConnectionId]
  created_at: [AuthorConnectionCreated_at]
  updated_at: [AuthorConnectionUpdated_at]
  name: [AuthorConnectionName]
  role: [AuthorConnectionRole]
  email: [AuthorConnectionEmail]
  password: [AuthorConnectionPassword]
  slug: [AuthorConnectionSlug]
  avatar: [AuthorConnectionAvatar]
  locale: [AuthorConnectionLocale]
  published_at: [AuthorConnectionPublished_at]
}

type AuthorConnectionId {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionCreated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionUpdated_at {
  key: DateTime
  connection: AuthorConnection
}

type AuthorConnectionName {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionRole {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionEmail {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPassword {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionSlug {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionAvatar {
  key: ID
  connection: AuthorConnection
}

type AuthorConnectionLocale {
  key: String
  connection: AuthorConnection
}

type AuthorConnectionPublished_at {
  key: DateTime
  connection: AuthorConnection
}

input AuthorInput {
  name: String!
  role: String!
  email: String!
  password: String!
  slug: String!
  avatar: ID
  cases: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editAuthorInput {
  name: String
  role: String
  email: String
  password: String
  slug: String
  avatar: ID
  cases: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

type Case {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  excerpt: String!
  slug: String!
  content: String!
  imgCard: UploadFile
  readingTime: String!
  audioDescription: UploadFile
  category: Category
  author: Author
  subcategory: Subcategoria
  locale: String
  published_at: DateTime
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag!]!
  content_libraries(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
}

type CaseConnection {
  values: [Case]
  groupBy: CaseGroupBy
  aggregate: CaseAggregator
}

type CaseAggregator {
  count: Int
  totalCount: Int
}

type CaseGroupBy {
  id: [CaseConnectionId]
  created_at: [CaseConnectionCreated_at]
  updated_at: [CaseConnectionUpdated_at]
  title: [CaseConnectionTitle]
  excerpt: [CaseConnectionExcerpt]
  slug: [CaseConnectionSlug]
  content: [CaseConnectionContent]
  imgCard: [CaseConnectionImgCard]
  readingTime: [CaseConnectionReadingTime]
  audioDescription: [CaseConnectionAudioDescription]
  category: [CaseConnectionCategory]
  author: [CaseConnectionAuthor]
  subcategory: [CaseConnectionSubcategory]
  locale: [CaseConnectionLocale]
  published_at: [CaseConnectionPublished_at]
}

type CaseConnectionId {
  key: ID
  connection: CaseConnection
}

type CaseConnectionCreated_at {
  key: DateTime
  connection: CaseConnection
}

type CaseConnectionUpdated_at {
  key: DateTime
  connection: CaseConnection
}

type CaseConnectionTitle {
  key: String
  connection: CaseConnection
}

type CaseConnectionExcerpt {
  key: String
  connection: CaseConnection
}

type CaseConnectionSlug {
  key: String
  connection: CaseConnection
}

type CaseConnectionContent {
  key: String
  connection: CaseConnection
}

type CaseConnectionImgCard {
  key: ID
  connection: CaseConnection
}

type CaseConnectionReadingTime {
  key: String
  connection: CaseConnection
}

type CaseConnectionAudioDescription {
  key: ID
  connection: CaseConnection
}

type CaseConnectionCategory {
  key: ID
  connection: CaseConnection
}

type CaseConnectionAuthor {
  key: ID
  connection: CaseConnection
}

type CaseConnectionSubcategory {
  key: ID
  connection: CaseConnection
}

type CaseConnectionLocale {
  key: String
  connection: CaseConnection
}

type CaseConnectionPublished_at {
  key: DateTime
  connection: CaseConnection
}

input CaseInput {
  title: String!
  excerpt: String!
  slug: String!
  content: String!
  imgCard: ID
  readingTime: String!
  audioDescription: ID
  tags: [ID]
  category: ID
  author: ID
  subcategory: ID
  content_libraries: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCaseInput {
  title: String
  excerpt: String
  slug: String
  content: String
  imgCard: ID
  readingTime: String
  audioDescription: ID
  tags: [ID]
  category: ID
  author: ID
  subcategory: ID
  content_libraries: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCaseInput {
  data: CaseInput
}

type createCasePayload {
  case: Case
}

input updateCaseInput {
  where: InputID
  data: editCaseInput
}

type updateCasePayload {
  case: Case
}

input deleteCaseInput {
  where: InputID
}

type deleteCasePayload {
  case: Case
}

type CasesSingle {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmpty
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [CasesSingle!]!
}

input CasesSingleInput {
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmptyInput!
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCasesSingleInput {
  title: String
  description: String
  btnShowMore: String
  empty: editComponentLibraryEmptyInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateCasesSingleInput {
  data: editCasesSingleInput
}

type updateCasesSinglePayload {
  casesSingle: CasesSingle
}

type deleteCasesSinglePayload {
  casesSingle: CasesSingle
}

type Category {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  locale: String
  published_at: DateTime
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
  content_libraries(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
  guides(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Category!]!
}

type CategoryConnection {
  values: [Category]
  groupBy: CategoryGroupBy
  aggregate: CategoryAggregator
}

type CategoryAggregator {
  count: Int
  totalCount: Int
}

type CategoryGroupBy {
  id: [CategoryConnectionId]
  created_at: [CategoryConnectionCreated_at]
  updated_at: [CategoryConnectionUpdated_at]
  name: [CategoryConnectionName]
  slug: [CategoryConnectionSlug]
  locale: [CategoryConnectionLocale]
  published_at: [CategoryConnectionPublished_at]
}

type CategoryConnectionId {
  key: ID
  connection: CategoryConnection
}

type CategoryConnectionCreated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionUpdated_at {
  key: DateTime
  connection: CategoryConnection
}

type CategoryConnectionName {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionSlug {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionLocale {
  key: String
  connection: CategoryConnection
}

type CategoryConnectionPublished_at {
  key: DateTime
  connection: CategoryConnection
}

input CategoryInput {
  name: String!
  slug: String!
  cases: [ID]
  content_libraries: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCategoryInput {
  name: String
  slug: String
  cases: [ID]
  content_libraries: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCategoryInput {
  data: CategoryInput
}

type createCategoryPayload {
  category: Category
}

input updateCategoryInput {
  where: InputID
  data: editCategoryInput
}

type updateCategoryPayload {
  category: Category
}

input deleteCategoryInput {
  where: InputID
}

type deleteCategoryPayload {
  category: Category
}

enum ENUM_CONTENTLIBRARY_LANGUAGE {
  portugues
  ingles
}

type ContentLibrary {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  img: UploadFile
  link: ComponentLibraryLink
  language: ENUM_CONTENTLIBRARY_LANGUAGE!
  content_type: ContentType
  locale: String
  published_at: DateTime
  categories(sort: String, limit: Int, start: Int, where: JSON): [Category!]!
  guides(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
}

type ContentLibraryConnection {
  values: [ContentLibrary]
  groupBy: ContentLibraryGroupBy
  aggregate: ContentLibraryAggregator
}

type ContentLibraryAggregator {
  count: Int
  totalCount: Int
}

type ContentLibraryGroupBy {
  id: [ContentLibraryConnectionId]
  created_at: [ContentLibraryConnectionCreated_at]
  updated_at: [ContentLibraryConnectionUpdated_at]
  title: [ContentLibraryConnectionTitle]
  img: [ContentLibraryConnectionImg]
  link: [ContentLibraryConnectionLink]
  language: [ContentLibraryConnectionLanguage]
  content_type: [ContentLibraryConnectionContent_type]
  locale: [ContentLibraryConnectionLocale]
  published_at: [ContentLibraryConnectionPublished_at]
}

type ContentLibraryConnectionId {
  key: ID
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionCreated_at {
  key: DateTime
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionUpdated_at {
  key: DateTime
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionTitle {
  key: String
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionImg {
  key: ID
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionLink {
  key: ID
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionLanguage {
  key: String
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionContent_type {
  key: ID
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionLocale {
  key: String
  connection: ContentLibraryConnection
}

type ContentLibraryConnectionPublished_at {
  key: DateTime
  connection: ContentLibraryConnection
}

input ContentLibraryInput {
  title: String!
  img: ID
  link: ComponentLibraryLinkInput
  language: ENUM_CONTENTLIBRARY_LANGUAGE!
  content_type: ID
  categories: [ID]
  guides: [ID]
  cases: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContentLibraryInput {
  title: String
  img: ID
  link: editComponentLibraryLinkInput
  language: ENUM_CONTENTLIBRARY_LANGUAGE
  content_type: ID
  categories: [ID]
  guides: [ID]
  cases: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContentLibraryInput {
  data: ContentLibraryInput
}

type createContentLibraryPayload {
  contentLibrary: ContentLibrary
}

input updateContentLibraryInput {
  where: InputID
  data: editContentLibraryInput
}

type updateContentLibraryPayload {
  contentLibrary: ContentLibrary
}

input deleteContentLibraryInput {
  where: InputID
}

type deleteContentLibraryPayload {
  contentLibrary: ContentLibrary
}

type ContentType {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  locale: String
  published_at: DateTime
  content_libraries(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [ContentType!]!
}

type ContentTypeConnection {
  values: [ContentType]
  groupBy: ContentTypeGroupBy
  aggregate: ContentTypeAggregator
}

type ContentTypeAggregator {
  count: Int
  totalCount: Int
}

type ContentTypeGroupBy {
  id: [ContentTypeConnectionId]
  created_at: [ContentTypeConnectionCreated_at]
  updated_at: [ContentTypeConnectionUpdated_at]
  name: [ContentTypeConnectionName]
  slug: [ContentTypeConnectionSlug]
  locale: [ContentTypeConnectionLocale]
  published_at: [ContentTypeConnectionPublished_at]
}

type ContentTypeConnectionId {
  key: ID
  connection: ContentTypeConnection
}

type ContentTypeConnectionCreated_at {
  key: DateTime
  connection: ContentTypeConnection
}

type ContentTypeConnectionUpdated_at {
  key: DateTime
  connection: ContentTypeConnection
}

type ContentTypeConnectionName {
  key: String
  connection: ContentTypeConnection
}

type ContentTypeConnectionSlug {
  key: String
  connection: ContentTypeConnection
}

type ContentTypeConnectionLocale {
  key: String
  connection: ContentTypeConnection
}

type ContentTypeConnectionPublished_at {
  key: DateTime
  connection: ContentTypeConnection
}

input ContentTypeInput {
  name: String!
  slug: String!
  content_libraries: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editContentTypeInput {
  name: String
  slug: String
  content_libraries: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createContentTypeInput {
  data: ContentTypeInput
}

type createContentTypePayload {
  contentType: ContentType
}

input updateContentTypeInput {
  where: InputID
  data: editContentTypeInput
}

type updateContentTypePayload {
  contentType: ContentType
}

input deleteContentTypeInput {
  where: InputID
}

type deleteContentTypePayload {
  contentType: ContentType
}

type GuidesSingle {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmpty
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [GuidesSingle!]!
}

input GuidesSingleInput {
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmptyInput!
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editGuidesSingleInput {
  title: String
  description: String
  btnShowMore: String
  empty: editComponentLibraryEmptyInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateGuidesSingleInput {
  data: editGuidesSingleInput
}

type updateGuidesSinglePayload {
  guidesSingle: GuidesSingle
}

type deleteGuidesSinglePayload {
  guidesSingle: GuidesSingle
}

type Guides {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  excerpt: String!
  slug: String!
  content: String!
  readingTime: String!
  audioDescription: UploadFile
  tag: Tag
  category: Category
  subcategory: Subcategoria
  icon: UploadFile
  locale: String
  published_at: DateTime
  content_libraries(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
  accessible_tos(sort: String, limit: Int, start: Int, where: JSON): [AccessibleTo!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
}

type GuidesConnection {
  values: [Guides]
  groupBy: GuidesGroupBy
  aggregate: GuidesAggregator
}

type GuidesAggregator {
  count: Int
  totalCount: Int
}

type GuidesGroupBy {
  id: [GuidesConnectionId]
  created_at: [GuidesConnectionCreated_at]
  updated_at: [GuidesConnectionUpdated_at]
  title: [GuidesConnectionTitle]
  excerpt: [GuidesConnectionExcerpt]
  slug: [GuidesConnectionSlug]
  content: [GuidesConnectionContent]
  readingTime: [GuidesConnectionReadingTime]
  audioDescription: [GuidesConnectionAudioDescription]
  tag: [GuidesConnectionTag]
  category: [GuidesConnectionCategory]
  subcategory: [GuidesConnectionSubcategory]
  icon: [GuidesConnectionIcon]
  locale: [GuidesConnectionLocale]
  published_at: [GuidesConnectionPublished_at]
}

type GuidesConnectionId {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionCreated_at {
  key: DateTime
  connection: GuidesConnection
}

type GuidesConnectionUpdated_at {
  key: DateTime
  connection: GuidesConnection
}

type GuidesConnectionTitle {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionExcerpt {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionSlug {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionContent {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionReadingTime {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionAudioDescription {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionTag {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionCategory {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionSubcategory {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionIcon {
  key: ID
  connection: GuidesConnection
}

type GuidesConnectionLocale {
  key: String
  connection: GuidesConnection
}

type GuidesConnectionPublished_at {
  key: DateTime
  connection: GuidesConnection
}

input GuideInput {
  title: String!
  excerpt: String!
  slug: String!
  content: String!
  readingTime: String!
  audioDescription: ID
  tag: ID
  category: ID
  subcategory: ID
  content_libraries: [ID]
  icon: ID
  accessible_tos: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editGuideInput {
  title: String
  excerpt: String
  slug: String
  content: String
  readingTime: String
  audioDescription: ID
  tag: ID
  category: ID
  subcategory: ID
  content_libraries: [ID]
  icon: ID
  accessible_tos: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createGuideInput {
  data: GuideInput
}

type createGuidePayload {
  guide: Guides
}

input updateGuideInput {
  where: InputID
  data: editGuideInput
}

type updateGuidePayload {
  guide: Guides
}

input deleteGuideInput {
  where: InputID
}

type deleteGuidePayload {
  guide: Guides
}

type HomePage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  heroSection: ComponentHomePageHeroSection
  guidesSection: ComponentHomePageGuidesSection
  casesSection: ComponentHomePageCasesSection
  librarySection: ComponentHomePageLibrarySection
  cta: ComponentHomePageCta
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [HomePage!]!
}

input HomePageInput {
  heroSection: ComponentHomePageHeroSectionInput!
  guidesSection: ComponentHomePageGuidesSectionInput
  casesSection: ComponentHomePageCasesSectionInput
  librarySection: ComponentHomePageLibrarySectionInput
  cta: ComponentHomePageCtaInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editHomePageInput {
  heroSection: editComponentHomePageHeroSectionInput
  guidesSection: editComponentHomePageGuidesSectionInput
  casesSection: editComponentHomePageCasesSectionInput
  librarySection: editComponentHomePageLibrarySectionInput
  cta: editComponentHomePageCtaInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateHomePageInput {
  data: editHomePageInput
}

type updateHomePagePayload {
  homePage: HomePage
}

type deleteHomePagePayload {
  homePage: HomePage
}

type Library {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmpty
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Library!]!
}

input LibraryInput {
  title: String!
  description: String!
  btnShowMore: String!
  empty: ComponentLibraryEmptyInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editLibraryInput {
  title: String
  description: String
  btnShowMore: String
  empty: editComponentLibraryEmptyInput
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateLibraryInput {
  data: editLibraryInput
}

type updateLibraryPayload {
  library: Library
}

type deleteLibraryPayload {
  library: Library
}

type NotFound {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  btn: ComponentButtonBtn
  img: UploadFile
  locale: String
  published_at: DateTime
  localizations(sort: String, limit: Int, start: Int, where: JSON): [NotFound!]!
}

input NotFoundInput {
  title: String!
  btn: ComponentButtonBtnInput!
  img: ID
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editNotFoundInput {
  title: String
  btn: editComponentButtonBtnInput
  img: ID
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input updateNotFoundInput {
  data: editNotFoundInput
}

type updateNotFoundPayload {
  notFound: NotFound
}

type deleteNotFoundPayload {
  notFound: NotFound
}

type Subcategoria {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  locale: String
  published_at: DateTime
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
  guides(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Subcategoria!]!
}

type SubcategoriaConnection {
  values: [Subcategoria]
  groupBy: SubcategoriaGroupBy
  aggregate: SubcategoriaAggregator
}

type SubcategoriaAggregator {
  count: Int
  totalCount: Int
}

type SubcategoriaGroupBy {
  id: [SubcategoriaConnectionId]
  created_at: [SubcategoriaConnectionCreated_at]
  updated_at: [SubcategoriaConnectionUpdated_at]
  name: [SubcategoriaConnectionName]
  slug: [SubcategoriaConnectionSlug]
  locale: [SubcategoriaConnectionLocale]
  published_at: [SubcategoriaConnectionPublished_at]
}

type SubcategoriaConnectionId {
  key: ID
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionCreated_at {
  key: DateTime
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionUpdated_at {
  key: DateTime
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionName {
  key: String
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionSlug {
  key: String
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionLocale {
  key: String
  connection: SubcategoriaConnection
}

type SubcategoriaConnectionPublished_at {
  key: DateTime
  connection: SubcategoriaConnection
}

input SubcategoriaInput {
  name: String!
  slug: String!
  cases: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editSubcategoriaInput {
  name: String
  slug: String
  cases: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createSubcategoriaInput {
  data: SubcategoriaInput
}

type createSubcategoriaPayload {
  subcategoria: Subcategoria
}

input updateSubcategoriaInput {
  where: InputID
  data: editSubcategoriaInput
}

type updateSubcategoriaPayload {
  subcategoria: Subcategoria
}

input deleteSubcategoriaInput {
  where: InputID
}

type deleteSubcategoriaPayload {
  subcategoria: Subcategoria
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  slug: String!
  locale: String
  published_at: DateTime
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
  guides(sort: String, limit: Int, start: Int, where: JSON): [Guides!]!
  localizations(sort: String, limit: Int, start: Int, where: JSON): [Tag!]!
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  name: [TagConnectionName]
  slug: [TagConnectionSlug]
  locale: [TagConnectionLocale]
  published_at: [TagConnectionPublished_at]
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionName {
  key: String
  connection: TagConnection
}

type TagConnectionSlug {
  key: String
  connection: TagConnection
}

type TagConnectionLocale {
  key: String
  connection: TagConnection
}

type TagConnectionPublished_at {
  key: DateTime
  connection: TagConnection
}

input TagInput {
  name: String!
  slug: String!
  cases: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editTagInput {
  name: String
  slug: String
  cases: [ID]
  guides: [ID]
  localizations: [ID]
  locale: String
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph!]!
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission!]!
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser!]!
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentButtonBtn {
  id: ID!
  text: String!
  url: String!
}

input ComponentButtonBtnInput {
  text: String!
  url: String!
}

input editComponentButtonBtnInput {
  id: ID
  text: String
  url: String
}

type ComponentHomePageCasesSection {
  id: ID!
  title: String!
  btn: ComponentButtonBtn
  cases(sort: String, limit: Int, start: Int, where: JSON): [Case!]!
}

input ComponentHomePageCasesSectionInput {
  title: String!
  cases: [ID]
  btn: ComponentButtonBtnInput!
}

input editComponentHomePageCasesSectionInput {
  id: ID
  title: String
  cases: [ID]
  btn: editComponentButtonBtnInput
}

type ComponentHomePageCta {
  id: ID!
  title: String!
  btn: ComponentButtonBtn
}

input ComponentHomePageCtaInput {
  title: String!
  btn: ComponentButtonBtnInput
}

input editComponentHomePageCtaInput {
  id: ID
  title: String
  btn: editComponentButtonBtnInput
}

enum ENUM_COMPONENTHOMEPAGEGUIDECARD_TYPE {
  all
  design
  dev
}

type ComponentHomePageGuideCard {
  id: ID!
  badge: String
  img: UploadFile
  title: String!
  description: String!
  linkUrl: String!
  linkText: String!
  type: ENUM_COMPONENTHOMEPAGEGUIDECARD_TYPE!
}

input ComponentHomePageGuideCardInput {
  badge: String
  img: ID
  title: String!
  description: String!
  linkUrl: String!
  linkText: String!
  type: ENUM_COMPONENTHOMEPAGEGUIDECARD_TYPE!
}

input editComponentHomePageGuideCardInput {
  id: ID
  badge: String
  img: ID
  title: String
  description: String
  linkUrl: String
  linkText: String
  type: ENUM_COMPONENTHOMEPAGEGUIDECARD_TYPE
}

type ComponentHomePageGuidesSection {
  id: ID!
  title: String
  guideCard: [ComponentHomePageGuideCard]
}

input ComponentHomePageGuidesSectionInput {
  title: String
  guideCard: [ComponentHomePageGuideCardInput!]
}

input editComponentHomePageGuidesSectionInput {
  id: ID
  title: String
  guideCard: [editComponentHomePageGuideCardInput]
}

type ComponentHomePageHeroSection {
  id: ID!
  title: String!
  subtitle: String!
  btn: ComponentButtonBtn
  img: UploadFile
}

input ComponentHomePageHeroSectionInput {
  title: String!
  subtitle: String!
  btn: ComponentButtonBtnInput!
  img: ID
}

input editComponentHomePageHeroSectionInput {
  id: ID
  title: String
  subtitle: String
  btn: editComponentButtonBtnInput
  img: ID
}

type ComponentHomePageLibrarySection {
  id: ID!
  title: String!
  btn: ComponentButtonBtn
  content_libraries(sort: String, limit: Int, start: Int, where: JSON): [ContentLibrary!]!
}

input ComponentHomePageLibrarySectionInput {
  title: String!
  btn: ComponentButtonBtnInput!
  content_libraries: [ID]
}

input editComponentHomePageLibrarySectionInput {
  id: ID
  title: String
  btn: editComponentButtonBtnInput
  content_libraries: [ID]
}

type ComponentLibraryEmpty {
  id: ID!
  text: String!
  img: UploadFile
}

input ComponentLibraryEmptyInput {
  text: String!
  img: ID
}

input editComponentLibraryEmptyInput {
  id: ID
  text: String
  img: ID
}

type ComponentLibraryLink {
  id: ID!
  text: String!
  url: String!
}

input ComponentLibraryLinkInput {
  text: String!
  url: String!
}

input editComponentLibraryLinkInput {
  id: ID
  text: String
  url: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | AccessibleTo | AccessibleToConnection | AccessibleToAggregator | AccessibleToGroupBy | AccessibleToConnectionId | AccessibleToConnectionCreated_at | AccessibleToConnectionUpdated_at | AccessibleToConnectionName | AccessibleToConnectionDescription | AccessibleToConnectionIcon | AccessibleToConnectionLocale | AccessibleToConnectionPublished_at | createAccessibleToPayload | updateAccessibleToPayload | deleteAccessibleToPayload | Author | AuthorConnection | AuthorAggregator | AuthorGroupBy | AuthorConnectionId | AuthorConnectionCreated_at | AuthorConnectionUpdated_at | AuthorConnectionName | AuthorConnectionRole | AuthorConnectionEmail | AuthorConnectionPassword | AuthorConnectionSlug | AuthorConnectionAvatar | AuthorConnectionLocale | AuthorConnectionPublished_at | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | Case | CaseConnection | CaseAggregator | CaseGroupBy | CaseConnectionId | CaseConnectionCreated_at | CaseConnectionUpdated_at | CaseConnectionTitle | CaseConnectionExcerpt | CaseConnectionSlug | CaseConnectionContent | CaseConnectionImgCard | CaseConnectionReadingTime | CaseConnectionAudioDescription | CaseConnectionCategory | CaseConnectionAuthor | CaseConnectionSubcategory | CaseConnectionLocale | CaseConnectionPublished_at | createCasePayload | updateCasePayload | deleteCasePayload | CasesSingle | updateCasesSinglePayload | deleteCasesSinglePayload | Category | CategoryConnection | CategoryAggregator | CategoryGroupBy | CategoryConnectionId | CategoryConnectionCreated_at | CategoryConnectionUpdated_at | CategoryConnectionName | CategoryConnectionSlug | CategoryConnectionLocale | CategoryConnectionPublished_at | createCategoryPayload | updateCategoryPayload | deleteCategoryPayload | ContentLibrary | ContentLibraryConnection | ContentLibraryAggregator | ContentLibraryGroupBy | ContentLibraryConnectionId | ContentLibraryConnectionCreated_at | ContentLibraryConnectionUpdated_at | ContentLibraryConnectionTitle | ContentLibraryConnectionImg | ContentLibraryConnectionLink | ContentLibraryConnectionLanguage | ContentLibraryConnectionContent_type | ContentLibraryConnectionLocale | ContentLibraryConnectionPublished_at | createContentLibraryPayload | updateContentLibraryPayload | deleteContentLibraryPayload | ContentType | ContentTypeConnection | ContentTypeAggregator | ContentTypeGroupBy | ContentTypeConnectionId | ContentTypeConnectionCreated_at | ContentTypeConnectionUpdated_at | ContentTypeConnectionName | ContentTypeConnectionSlug | ContentTypeConnectionLocale | ContentTypeConnectionPublished_at | createContentTypePayload | updateContentTypePayload | deleteContentTypePayload | GuidesSingle | updateGuidesSinglePayload | deleteGuidesSinglePayload | Guides | GuidesConnection | GuidesAggregator | GuidesGroupBy | GuidesConnectionId | GuidesConnectionCreated_at | GuidesConnectionUpdated_at | GuidesConnectionTitle | GuidesConnectionExcerpt | GuidesConnectionSlug | GuidesConnectionContent | GuidesConnectionReadingTime | GuidesConnectionAudioDescription | GuidesConnectionTag | GuidesConnectionCategory | GuidesConnectionSubcategory | GuidesConnectionIcon | GuidesConnectionLocale | GuidesConnectionPublished_at | createGuidePayload | updateGuidePayload | deleteGuidePayload | HomePage | updateHomePagePayload | deleteHomePagePayload | Library | updateLibraryPayload | deleteLibraryPayload | NotFound | updateNotFoundPayload | deleteNotFoundPayload | Subcategoria | SubcategoriaConnection | SubcategoriaAggregator | SubcategoriaGroupBy | SubcategoriaConnectionId | SubcategoriaConnectionCreated_at | SubcategoriaConnectionUpdated_at | SubcategoriaConnectionName | SubcategoriaConnectionSlug | SubcategoriaConnectionLocale | SubcategoriaConnectionPublished_at | createSubcategoriaPayload | updateSubcategoriaPayload | deleteSubcategoriaPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_at | TagConnectionUpdated_at | TagConnectionName | TagConnectionSlug | TagConnectionLocale | TagConnectionPublished_at | createTagPayload | updateTagPayload | deleteTagPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentButtonBtn | ComponentHomePageCasesSection | ComponentHomePageCta | ComponentHomePageGuideCard | ComponentHomePageGuidesSection | ComponentHomePageHeroSection | ComponentHomePageLibrarySection | ComponentLibraryEmpty | ComponentLibraryLink

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  accessibleTo(id: ID!, publicationState: PublicationState): AccessibleTo
  accessibleTos(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [AccessibleTo!]!
  accessibleTosConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): AccessibleToConnection
  author(id: ID!, publicationState: PublicationState): Author
  authors(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Author!]!
  authorsConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): AuthorConnection
  case(id: ID!, publicationState: PublicationState): Case
  cases(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Case!]!
  casesConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): CaseConnection
  casesSingle(publicationState: PublicationState, locale: String): CasesSingle
  category(id: ID!, publicationState: PublicationState): Category
  categories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Category!]!
  categoriesConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): CategoryConnection
  contentLibrary(id: ID!, publicationState: PublicationState): ContentLibrary
  contentLibraries(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [ContentLibrary!]!
  contentLibrariesConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): ContentLibraryConnection
  contentType(id: ID!, publicationState: PublicationState): ContentType
  contentTypes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [ContentType!]!
  contentTypesConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): ContentTypeConnection
  guidesSingle(publicationState: PublicationState, locale: String): GuidesSingle
  guide(id: ID!, publicationState: PublicationState): Guides
  guides(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Guides!]!
  guidesConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): GuidesConnection
  homePage(publicationState: PublicationState, locale: String): HomePage
  library(publicationState: PublicationState, locale: String): Library
  notFound(publicationState: PublicationState, locale: String): NotFound
  subcategoria(id: ID!, publicationState: PublicationState): Subcategoria
  subcategorias(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Subcategoria!]!
  subcategoriasConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): SubcategoriaConnection
  tag(id: ID!, publicationState: PublicationState): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState, locale: String): [Tag!]!
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON, locale: String): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile!]!
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  """Retrieve all the existing roles. You can't apply filters on this query."""
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole!]!
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser!]!
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createAccessibleTo(input: createAccessibleToInput): createAccessibleToPayload
  updateAccessibleTo(input: updateAccessibleToInput): updateAccessibleToPayload
  deleteAccessibleTo(input: deleteAccessibleToInput): deleteAccessibleToPayload
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createCase(input: createCaseInput): createCasePayload
  updateCase(input: updateCaseInput): updateCasePayload
  deleteCase(input: deleteCaseInput): deleteCasePayload
  updateCasesSingle(input: updateCasesSingleInput, locale: String): updateCasesSinglePayload
  deleteCasesSingle(locale: String): deleteCasesSinglePayload
  createCategory(input: createCategoryInput): createCategoryPayload
  updateCategory(input: updateCategoryInput): updateCategoryPayload
  deleteCategory(input: deleteCategoryInput): deleteCategoryPayload
  createContentLibrary(input: createContentLibraryInput): createContentLibraryPayload
  updateContentLibrary(input: updateContentLibraryInput): updateContentLibraryPayload
  deleteContentLibrary(input: deleteContentLibraryInput): deleteContentLibraryPayload
  createContentType(input: createContentTypeInput): createContentTypePayload
  updateContentType(input: updateContentTypeInput): updateContentTypePayload
  deleteContentType(input: deleteContentTypeInput): deleteContentTypePayload
  updateGuidesSingle(input: updateGuidesSingleInput, locale: String): updateGuidesSinglePayload
  deleteGuidesSingle(locale: String): deleteGuidesSinglePayload
  createGuide(input: createGuideInput): createGuidePayload
  updateGuide(input: updateGuideInput): updateGuidePayload
  deleteGuide(input: deleteGuideInput): deleteGuidePayload
  updateHomePage(input: updateHomePageInput, locale: String): updateHomePagePayload
  deleteHomePage(locale: String): deleteHomePagePayload
  updateLibrary(input: updateLibraryInput, locale: String): updateLibraryPayload
  deleteLibrary(locale: String): deleteLibraryPayload
  updateNotFound(input: updateNotFoundInput, locale: String): updateNotFoundPayload
  deleteNotFound(locale: String): deleteNotFoundPayload
  createSubcategoria(input: createSubcategoriaInput): createSubcategoriaPayload
  updateSubcategoria(input: updateSubcategoriaInput): updateSubcategoriaPayload
  deleteSubcategoria(input: deleteSubcategoriaInput): deleteSubcategoriaPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload
  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload
  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload
  """Create a new user"""
  createUser(input: createUserInput): createUserPayload
  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload
  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  createAccessibleToLocalization(input: updateAccessibleToInput!): AccessibleTo!
  createAuthorLocalization(input: updateAuthorInput!): Author!
  createCaseLocalization(input: updateCaseInput!): Case!
  createCasesSingleLocalization(input: updateCasesSingleInput!): CasesSingle!
  createCategoryLocalization(input: updateCategoryInput!): Category!
  createContentLibraryLocalization(input: updateContentLibraryInput!): ContentLibrary!
  createContentTypeLocalization(input: updateContentTypeInput!): ContentType!
  createGuidesSingleLocalization(input: updateGuidesSingleInput!): GuidesSingle!
  createGuideLocalization(input: updateGuideInput!): Guides!
  createHomePageLocalization(input: updateHomePageInput!): HomePage!
  createLibraryLocalization(input: updateLibraryInput!): Library!
  createNotFoundLocalization(input: updateNotFoundInput!): NotFound!
  createSubcategoriaLocalization(input: updateSubcategoriaInput!): Subcategoria!
  createTagLocalization(input: updateTagInput!): Tag!
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."""
scalar JSON

"""A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
